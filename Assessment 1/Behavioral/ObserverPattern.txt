import java.util.ArrayList;
import java.util.List;

// Subject Interface
interface StockSubject {
    void registerObserver(StockObserver observer);
    void removeObserver(StockObserver observer);
    void notifyObservers();
}

// Observer Interface
interface StockObserver {
    void update(float price);
}

// Concrete Subject (Stock)
class Stock implements StockSubject {
    private List<StockObserver> observers = new ArrayList<>();
    private float price;

    public void setPrice(float price) {
        this.price = price;
        notifyObservers();
    }

    @Override
    public void registerObserver(StockObserver observer) {
        observers.add(observer);
    }

    @Override
    public void removeObserver(StockObserver observer) {
        observers.remove(observer);
    }

    @Override
    public void notifyObservers() {
        for (StockObserver observer : observers) {
            observer.update(price);
        }
    }
}

// Concrete Observer (User)
class User implements StockObserver {
    private String name;

    public User(String name) {
        this.name = name;
    }

    @Override
    public void update(float price) {
        System.out.println(name + " notified: Stock price changed to $" + price);
    }
}

// Client
public class ObserverPatternDemo {
    public static void main(String[] args) {
        Stock stock = new Stock();

        User user1 = new User("Alice");
        User user2 = new User("Bob");

        stock.registerObserver(user1);
        stock.registerObserver(user2);

        stock.setPrice(100.0f);  // Both Alice and Bob get notified
        stock.setPrice(105.5f);  // Both Alice and Bob get notified

        stock.removeObserver(user2);
        stock.setPrice(110.0f);  // Only Alice gets notified
    }
}
